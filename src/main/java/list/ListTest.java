package list;


public class ListTest {
    /**
     * Тестируем методы для работы со списками
     * @param list тестируемый список
     *
     * На этапе компиляции не известно, объектом какого класса будет тестируемый список list.
     * Единственное, что нам известно, это то, что тип передаваемого объекта реализует интерфейс List.
     * Но нам достаточно этого знания, чтобы быть уверенными,
     * что у переданного объекта будут методы get(int i), add(Object o), getSize() и remove(int i),
     * нам это гарантирует интерфейс.
     *
     * Конкретный тип аргумента list становится ясен на этапе выполнения программы. Это называется позднее или динамическое связывание.
     * За счет позднего связывания мы можем использовать один метод для разных типов объектов, этот механизм называется полиморфизм.
     * Полиморфизм дословно - "многообразие форм".
     * Благодаря полиморфизму мы можем использовать метод testList для объектов
     * любого типа, который реализует интерфейс List. И даже если мы добавим новый вид списков,
     * нам не придется изменять метод testList или добалять новый аналогичный метод.
     * Обратите внимание, что в методе main мы вызываем метод testList и для объекта типа ArrayList, и для объекта типа LinkedList.
     *
     * Полиморфизм неотделим от наследования. Невозможно использовать полиморфизм, если нет родительского класса или интерфейса.
     *
     *
     * Ключевое слово static указывает на то, что данный метод является статическим.
     * Данный метод не использует внутри себя поля и не вызывает нестатические методы текущего класса,
     * в нем не используется ссылка this. Таким образом, метод может работать независимо от экземпляра класса.
     * Поэтому статические методы в отличие от нестатических можно вызывать через точку от названия класса
     * ListTest.testList(list)
     * Сравните с вызовом метода у объекта
     * ListTest listTest = new ListTest();
     * listTest.testList(list)
     *
     * Нестатические методы можно вызывать только вторым способом. Статические - любым из 2х способов.
     */
    public static void testList(List list){
		/* Мы вызываем метод add у объекта list
		 * Интерфейс гарантирует нам, что у объекта list есть такой метод.
		 */
        list.add("2");
        list.add("4");
        list.add("6");
        list.add("8");
        //печать элементов списка
        for (int i = 0; i < list.getSize(); i++){
            System.out.println(list.get(i));
        }

        list.remove(2);
        System.out.println("Modified array list:");
        //печать элементов списка
        for (int i = 0; i < list.getSize(); i++){
            System.out.println(list.get(i));
        }
        System.out.println("Is empty: "+ list.isEmpty());
    }

    public static void main(String[] args) {

        //создаем новый объект типа ArrayList
        List arrayList = new ArrayList();
        System.out.println("Array list:");
        //тестируем ArrayList
        testList(arrayList);
        //создаем новый объект типа LinkedList
        List linkedList = new LinkedList();
        System.out.println("Linked list:");
        //тестируем LinkedList
        testList(linkedList);

    }

}