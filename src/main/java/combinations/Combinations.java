package combinations;

public class Combinations {
    public static void main(String[] args) {
        //массив для хранения весов мешков
        int[] a = {10, 10, 4, 2, 1, 3, 5, 10, 21, 21, 100};
        //сумма весов всех мешков
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum = sum + a[i];
        }
        //допустим, что изначально все мешки лежат в одной куче. Тогда разница весов равна сумме весов всех мешков
        //при желании можно задать best равной Integer.MAX_VALUE
        int best = sum;
        int result = 0;
        //Всего различных сочетний 2^n
        //1 << a.length = 2^n
        //Цикл для перебора всех сочетаний
        for (int i = 0; i < 1 << a.length; i++) {
            int d = 0;
            //цикл для перебора мешков и подсчета суммы весов мешков из второй кучи
            for (int j = 0; j < a.length; j++) {
                //равен ли нулю j+1ая с конца цифра в двоичной записи числа i
                //или для нашей задачи - не вошел ли j+1ый с конца мешок в первую кучу
                if ((i & (1 << j)) == 0) {
                    //добавляем j+1ый с конца мешок(поскольку у нас сдвиг 1 << j идет с конца)
                    d = d + a[a.length - 1 - j];
                }
            }
            //вычисляем текущую разность весов
            int current = Math.abs(sum - 2 * d);
            //если текущая разность меньше той, что хранится в best, то меняем best и запоминаем сочетание в переменную result
            if (best > current) {
                best = current;
                result = i;
            }
        }
        //печатаем минимальную разность
        System.out.println(best);
        //пречатаем результат в виде числа в двоичной системе счисления, где
        //1 - мешки первой кучи
        //0 - мешки второй кучи
        System.out.println(Integer.toBinaryString(result));
    }
}

